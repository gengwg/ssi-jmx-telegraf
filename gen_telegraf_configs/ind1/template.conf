[global_tags]
  oot = "custpromise"
  ooep = "PROD"
  ooe = "prod"
  dc = "X"
  ooc = "prod-X"
  oocz = "az1"
  ooci = "289032203"
  eth0_ipv4 = "10.46.39.75"
  mdom = "generic-oneops"
  ooa = "wmsind1"

[agent]
  interval = "45s"
  round_interval = false
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "5s"
  flush_interval = "30s"
  flush_jitter = "5s"
  debug = true
  quiet = false
  hostname = "mon.wms.walmart.com"
  omit_hostname = false

[[outputs.kafka]]
  brokers = ["dfw-kafka-broker00.bfd.walmart.com:9092","dfw-kafka-broker01.bfd.walmart.com:9092","dfw-kafka-broker02.bfd.walmart.com:9092","dfw-kafka-broker03.bfd.walmart.com:9092"]
  #brokers = ["kafka.kafka-cluster-telemetry.prod1-ndc.walmart.com:9092"]
  topic = "tf.medusa.metric.1"
  routing_tag = "host"
  compression_codec = 0
  required_acks = -1
  max_retry = 3
  data_format = "json"

# Publish all metrics to /metrics for Prometheus to scrape
[[outputs.prometheus_client]]
  ## Address to listen on.
  listen = ":6280"

  ## Use HTTP Basic Authentication.
  # basic_username = "Foo"
  # basic_password = "Bar"

  ## If set, the IP Ranges which are allowed to access metrics.
  ##   ex: ip_range = ["192.168.0.0/24", "192.168.1.0/30"]
  # ip_range = []

  ## Path to publish the metrics on.
  # path = "/metrics"

  ## Expiration interval for each metric. 0 == no expiration
  # expiration_interval = "60s"

  ## Collectors to enable, valid entries are "gocollector" and "process".
  ## If unset, both are enabled.
  # collectors_exclude = ["gocollector", "process"]

  ## Send string metrics as Prometheus labels.
  ## Unless set to false all string metrics will be sent as labels.
  # string_as_label = true

  ## If set, enable TLS with the given certificate.
  # tls_cert = "/etc/ssl/telegraf.crt"
  # tls_key = "/etc/ssl/telegraf.key"

  ## Export metric collection time.
  # export_timestamp = false

{% for sp in service_port %}
[[inputs.jolokia2_proxy]]
  url = "http://10.46.39.75:8888/jolokia"

  [inputs.jolokia2_proxy.tags]
  ooa = "wms{{ fc }}"
  oop = "{{ sp[0] }}"
  #default_target_username = ""
  #default_target_password = ""
  [[inputs.jolokia2_proxy.target]]
    url = "service:jmx:rmi:///jndi/rmi://{{ fc_ip }}:{{ sp[1] }}/jmxrmi"
    # username = ""
    # password = ""

  [[inputs.jolokia2_proxy.metric]]
    name  = "wms_heap_memory_usage"
    mbean = "java.lang:type=Memory"
    paths = ["HeapMemoryUsage"]

  ##Collect Java CPU utilization
  [[inputs.jolokia2_proxy.metric]]
    name = "wms_cpu_usage"
    mbean  = "java.lang:type=OperatingSystem"
    paths = ["ProcessCpuLoad", "SystemCpuLoad"]

  ##Collect GC information
  [[inputs.jolokia2_proxy.metric]]
    name = "wms_gc_markandsweep"
    mbean  = "java.lang:type=GarbageCollector,name=PS MarkSweep"
    paths = ["CollectionCount", "CollectionTime", "LastGcInfo"]

  ##Collect GC information
  [[inputs.jolokia2_proxy.metric]]
    name = "wms_gc_scavenge"
    mbean  = "java.lang:type=GarbageCollector,name=PS Scavenge"
    paths = ["CollectionCount", "CollectionTime", "LastGcInfo"]

  ##This collect thread counts metrics.
  [[inputs.jolokia2_proxy.metric]]
    name = "wms_thread_count"
    mbean  = "java.lang:type=Threading"
    paths = ["TotalStartedThreadCount", "ThreadCount", "DaemonThreadCount", "PeakThreadCount"]

  ##This collect number of class loaded/unloaded counts metrics.
  [[inputs.jolokia2_proxy.metric]]
    name = "wms_class_count"
    mbean  = "java.lang:type=ClassLoading"
    paths = ["LoadedClassCount", "UnloadedClassCount", "TotalLoadedClassCount"]

  ##This collect number of class loaded/unloaded counts metrics.
  [[inputs.jolokia2_proxy.metric]]
    name = "wms_ssn_connection_pool"
    mbean  = "com.ssn.persistence:type=persistence"
    paths = ["NumActive", "NumIdle"]


{% endfor %}

